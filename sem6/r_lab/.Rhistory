print(sort(x))
print(sort(x,decreasing = TRUE))
#4
x <- c(20,10,15,30)
print(max(x))
print(min(x))
a=matrix(c(10,20,30),nrow=1,ncol=3)
b=matrix(c(40,50,60),nrow=1,ncol=3)
c=matrix(c(70,80,90),nrow=1,ncol=3)
d=cbind(a,b)
e=cbind(d,c)
print(e)
A=rbind(a,b)
B=rbind(A,c)
print(B)
v1=c(1,2,3,4,5)
v2=c(-1,-3,-5,-6,-7,0,32)
print(v1)
print(v2)
com=array(c(v1,v2),dim=c(3,3,2))
print("combined two arrays : ")
print(com)
print("second row of 2nd matrix of array : ")
print(com[2,,2])
print("Third element of 3rd row and the 3rd column of 1st matrix : ")
print(com[3,3,1])
emp.data <- data.frame(
id = c(1:5),
name = c("A","B","C","D","E"),
dept = c("IT","HR","IT","Finance","HR"),
stringsAsFactors = FALSE
)
print(emp.data)
#get structure of dataframe
str(emp.data)
#print summary
print(summary(emp.data))
#extract specific columns
res <- data.frame(emp.data$id,emp.data$name)
print(res)
emp.data <- data.frame(
id = c(1:5),
name = c("A","B","C","D","E"),
dept = c("IT","HR","IT","Finance","HR"),
stringsAsFactors = FALSE
)
emp.newrows <- data.frame(
id = c(6:7),
name = c("F","G"),
dept = c("Finance","HR"),
stringsAsFactors = FALSE
)
emp.newcols <- data.frame(
place = c("Delhi","Hyderabad","Mumbai","Vizag","Chennai","Bengaluru","Kolkata")
)
print(emp.data)
emp.finalrows = rbind(emp.data,emp.newrows)
print(emp.finalrows)
emp.finalcols = cbind(emp.finalrows,emp.newcols)
print(emp.finalcols)
n<-readline(prompt="enter a number: ")
s=readline(prompt="enter a character: ")
log=readline(prompt = "enter a logical value: ")
print(class(n))
n=as.complex(n)
print(class(n))
print(class(s))
s=as.complex(s)
print(class(s))
print(class(log))
log=as.complex(log)
print(class(log))
print(head(letters,10))
print("Last 10 letters in upper case:")
print(tail(LETTERS,10))
print(head(LETTERS[22:24]))
print(tail(LETTERS[22:24]))
print(LETTERS[22:24])
print(LETTERS[22:24])
a<-0
b<-1
for(i in range(2:10)){
if(a==0 && b==1){
print(paste(a,b))
}
c<-a+b
print(c)
}
a<-0
b<-1
for(i in range(2:10)){
if(a==0 && b==1){
print(paste(a,b))
}
c<-a+b
print(c)
a<-b
b<-c
}
a<-0
b<-1
for(i in range(3:10)){
if(a==0 && b==1){
print(paste(a,b))
}
c<-a+b
print(c)
a<-b
b<-c
}
a<-0
b<-1
for(i in 3:10){
if(a==0 && b==1){
print(paste(a,b))
}
c<-a+b
print(c)
a<-b
b<-c
}
m = 0
n = 1
print("The First 10 Fibonacci numbers are :")
for(i in 3:10){
if(m == 0 && n == 1){
print(m)
print(n)
}
x = m + n
m = n
n = x
print(x)
}
a<-0
b<-1
for(i in 3:10){
if(a==0 && b==1){
print(paste(a,"\n",b))
}
c<-a+b
print(c)
a<-b
b<-c
}
b<-1
for(i in 3:10){
if(a==0 && b==1){
print(a)
print(b)
}
c<-a+b
print(c)
a<-b
b<-c
}
m = 0
a<-0
b<-1
for(i in 3:10){
if(a==0 && b==1){
print(a)
print(b)
}
c<-a+b
print(c)
a<-b
b<-c
}
print('sequence of numbers from 20 to 50: ')
print(seq(20,50))
s=0
for (i in 20:50){
s=s+i
}
print(paste('Mean of numbers from 20 to 60:',s/(50-20)))
li=list()
n=readline(prompt="enter a num ")
if(i%%2==0){
li=append(li,i)
}
}
for(i in 1:n){
if(i%%2==0){
li=append(li,i)
}
}
n=readline(prompt="enter a num ")
for(i in 1:n){
if(i%%2==0){
li=append(li,i)
}
}
print('List of even nos from 1 to n')
paste(li)
print('prime numbers up to a given number,n')
n=readline(prompt = "enter a num ")
for(i in 2:n){
c=0
for(j in 3:i-1){
#print(j)
#print(paste(i,i%%j,j))
if(i%%j==0){
c=c+1
#print(c)
break
}
}
if(c==0){
print(i)
}
}
paste("Version Of R Installation : ",R.version.string)
#1
emp.data <- data.frame(
id = c(1:5),
name = c("A","B","C","D","E"),
dept = c("IT","HR","IT","Finance","HR"),
)
#1
emp.data <- data.frame(
id = c(1:5),
name = c("A","B","C","D","E"),
dept = c("IT","HR","IT","Finance","HR")
)
print(emp.data)
#get structure of dataframe
str(emp.data)
#print summary
print(summary(emp.data))
#3
plot.new()
plot( xlab="", ylab="", xlim=c(0,20), ylim=c(0,20))
plot(1, xlab="", ylab="", xlim=c(0,20), ylim=c(0,20))
#3
plot.new()
plot(1, xlab="", ylab="", xlim=c(0,20), ylim=c(0,20))
# Write an R program to describe any five string handling functions.
paste("Hello","World")
nchar("Hello")
# Write an R program to describe any five string handling functions.
paste("Hello","World")
print(emp.data)clearPushBack()
clearPushBack()
# Write an R program to describe any five string handling functions.
paste("Hello","World")
nchar("Hello")
casefold("HElLo")
chartr("o","O","Hello Cools")
strsplit("Today is a Holiday"," ")
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
input = readline(prompt="Enter a String : ")
library(tidyverse)
input = readline(prompt="Enter a String : ")
a = c(strsplit(input, "")[[1]])
print(a)
x = duplicated(a)
print(x)
print("Count of Duplicate Characters in given string :")
length(a[x])
print(a[x])
data.frame(a[x])
packages.install(stringi)
install.packages(stringi)
install.packages("stringi")
install.packages("stringi")
# Write an R program to check the given string is palindrome or not.
library(stringi)
input = readline(prompt = "Enter a String : ")
if(stri_reverse(input) == input){
cat("String",input,"is a Palindrome")
}else{
cat("String",input,"is not a Palindrome")
}
install.packages("stringr")
library(stringr)
paste("Version Of R Installation : ",R.version.string)
install.packages("installr")
library(installr)
install.packages("stringi")
# Write an R program to check the given string is palindrome or not.
library(stringi)
input = readline(prompt = "Enter a String : ")
if(stri_reverse(input) == input){
cat("String",input,"is a Palindrome")
}else{
cat("String",input,"is not a Palindrome")
}
install.packages("stringr")
library(stringr)
x=readline(prompt="enter a string ")
sub=readline(prompt="enter substring")
str_detect(a,sub)
str _detect(a,sub)
str_detect(a,sub)
library(stringr)
x=readline(prompt="enter a string ")
sub=readline(prompt="enter substring")
str_detect(a,sub)
grepl(x,sub)
x=readline(prompt="enter a string ")
grepl(x,sub)
x=readline(prompt="enter a string ")
sub=readline(prompt="enter substring")
grepl(x,sub)
str_detect(sub,a)
grepl(sub,x)
sub=readline(prompt="enter substring")
grepl(sub,x)
install.packages("installr")
library(installr)
updateR()
head(letters(10))
head(letters(10))
head(letters,10)
head(letters,10)
tail(LETTERS,10)
LETTERS[22:25]
n<-readline(prompt = "enter a input ")
li=list()
for(i in 1:n){
if(i%%2==0){
li=append(li,i)
}
}
print(li)
print(sample(c(-50,50),10,replace=TRUE))
print(sample(-50,50,10,replace=TRUE))
print(sample(c(-50:50),10,replace=TRUE))
matrix(c(1:20),nrow=5,ncol=4,byrow=TRUE,labels=list(c("r1","r2","r3","r4","r5"),c("c1","c2","c3","c4","c5")))
matrix(c(1:20),nrow=5,ncol=4,byrow=TRUE,dimnames=list(c("r1","r2","r3","r4","r5"),c("c1","c2","c3","c4","c5")))
matrix(c(1:20),nrow=5,ncol=4,byrow=TRUE,dimnames=list(c("r1","r2","r3","r4","r5"),c("c1","c2","c3","c4")))
x<-c(5,1,3,2,4)
sort(x)
sort(x,decreasing=TRUE)
min(x)
max(x)
li<-list(c(1:4),matrix(1:9,nrow=3,ncol=3),"r",44,44.5),TRUE)
li<-list(c(1:4),matrix(1:9,nrow=3,ncol=3),"r",44,44.5,TRUE)
PRINT(LI)
print(li)
emp.data<-data.frame(id=c(1:5),name=c("hi","bi","pi","ri","ti"),job=c("j1","j2","j3","j4","j5"))
print(emp.data)
c1<-matrix(c(1:9),nrow=3,ncol=3)
c2<-matrix(c(10:18),nrow=3,ncol=3)
c3<-matrix(c(19:27),nrow=3,ncol=3)
A=rbind(c1,c2)
View(A)
A=cbind(c1,c2)
B=cbind(A,c3)
print(B)
A=cbind(c1,c2,nrow=3,ncol=3)
B=cbind(A,c3,nrow=3,ncol=3)
print(B)
A=rbind(c1,c2,nrow=3,ncol=3)
B=rbind(A,c3,nrow=3,ncol=3)
print(B)
A=rbind(c1,c2)
B=rbind(A,c3)
print(B)
A=cbind(c1,c2)
B=rbind(A,c3)
print(B)
A=rbind(c1,c2)
orint(A)
B=rbind(A,c3)
print(B)
A=rbind(c1,c2)
print(A)
B=rbind(A,c3)
matrix(t(cbind(c1,c2,c3)),ncol=3, byrow=T)
c1<-matrix(c(1:9),nrow=3,ncol=3)
c2<-matrix(c(10:18),nrow=3,ncol=3)
c3<-matrix(c(19:27),nrow=3,ncol=3)
matrix(t(cbind(c1,c2,c3)),ncol=3, byrow=T)
a = matrix(c(1,2,3),nrow=1,ncol=3)
b = matrix(c(4,5,6),nrow=1,ncol=3)
c = matrix(c(7,8,9),nrow=1,ncol=3)
A = rbind(a,b)
B = rbind(A,c)
print(B)
a = matrix(c(1:9),nrow=3,ncol=3)
b = matrix(c(10:18),nrow=3,ncol=3)
c = matrix(c(19:27),nrow=3,ncol=3)
A = rbind(a,b)
B = rbind(A,c)
print(B)
print(a)
matrix(cbind(c1,c2,c3),ncol=3, byrow=3)
matrix(cbind(c1,c2,c3),ncol=3, byrow=3)
matrix(cbind(a,b,c),ncol=3, byrow=3)
matrix(cbind(a,b,c),ncol=3, byrow=T)
matrix(t(cbind(a,b,c)),ncol=3, byrow=T)
matrix(t(cbind(a,b,c)),ncol=3)
A=rbind(c1,c2,byrow=T)
print(A)
B=rbind(A,c3,byrow=T)
A=cbind(c1,c2,byrow=T)
print(A)
B=cbind(A,c3,byrow=T)
v1<-c(1,2,3)
v2<-c(4,5,6,7,8)
arr=array(c(v1,v2),dim=c(3,3,2))
print(arr[2,,2])
print(arr[3,3,1])
print(summary(emp.data))
marks<-c(10,20,30)
barplot(marks,main="marks of 3 subjects ",xlab="subjects",ylab="marks",border="brown",angle=90,col=c("red","green","blue"))
marks<-c(10,20,30)
barplot(marks,main="marks of 3 subjects ",xlab="subjects",ylab="marks",names.arg=c("maths","phy","chem"),border="brown",angle=90,col=c("red","green","blue"))
marks<-c(10,20,30)
barplot(marks,main="marks of 3 subjects ",xlab="subjects",
ylab="marks",names.arg=c("maths","phy","chem"),
border="brown",angle=90,col=c("red","green","blue"))
marks<-c(10,20,30)
barplot(marks,main="marks of 3 subjects ",xlab="subjects",
ylab="marks",names.arg=c("maths","phy","chem"),
border="brown",angle=90)
marks = c(80,92,65)
barplot(marks, main="Comparison of 3 subjects marks", xlab="Subject", ylab="Marks",
names.arg=c("English","Maths","Science"),
col="lightblue", border="brown",angle=90, horiz="FALSE")
marks<-c(10,20,30)
barplot(marks,main="marks of 3 subjects ",xlab="subjects",
ylab="marks",names.arg=c("maths","phy","chem"),
border="brown",angle=90,col=c("red","green","blue"),horiz="FALSE")
setwd("G://sem6/r_lab/")
csvdata=read.csv(file="sample.csv")
setwd("G:/sem6/r_lab/")
csvdata=read.csv(file="sample.csv")
setwd("G:/sem6/r_lab")
csvdata=read.csv(file="sample.csv")
setwd("G:/sem6/r_lab")
csv_data<-read.csv(file='sample.csv')
print(csv_data)
print(ncol(csv_data))
print(csvdata)
print(nrow(csvdata))
print(ncol(csvdata))
print(csvdata.str)
print(str(csvdata))
plot.new()
plot(1,xlab="",ylab="",xlim=c(1:20),ylim=c(1:20))
plot(1,xlab="",ylab="")
plot(1,xlab="",ylab="",xlim=c(1:20),ylim=c(1:20))
plot(1,xlab="",ylab="",xlim=c(1,20),ylim=c(1,20))
marks<- c(10,20,30,40)
barplot(marks,main="marks of 4 subjects ",xlab="subjects ",ylab="marks ",names.arg=c("m1","m2","m3","m4"),col=c("red","blue","pink","green"),xlim=x(0,5),ylim=c(0,50))
barplot(marks,main="marks of 4 subjects ",xlab="subjects ",ylab="marks ",names.arg=c("m1","m2","m3","m4"),col=c("red","blue","pink","green"),xlim=c(0,5),ylim=c(0,50))
library(plotrix)
pie3D(labels=c("1","2","3"))
install.packages(plotrix)
install.packages(plotrix)
packages.install(plotrix)
library(plotrix)
install.packages("plotrix")
library(plotrix)
marks<-c(10,20,30)
pie3D(marks,main="marks of 3 subjects ",labels=c("1","2","3"),col=c("green","pink","yellow"))
pie3D(marks,main="marks of 3 subjects ",labels=c("1","2","3"),col=c("green","pink","yellow"),explode=0.2)
library(stringi)
input<-readline(prompt="enter a string ")
if(stri_reverse(input)==input){
print("palindrome")
}
else{
print("not palindrome")
}
library(stringi)
input<-readline(prompt="enter a string ")
if(stri_reverse(input)==input){
print("palindrome")
}else{
print("not")
}
input<-readline(prompt="enter a string ")
input<-readline(prompt="enter a string ")
print(substr(input,5,7))
print(tolower(input))
print(toupper(input))
input<-readline(prompt="enter a string ")
a=strsplit(input)[[1]]
a=c(strsplit(input,""))[[1]]
x=duplicated(a)
print(a[x])
print(length(a[x]))
input="abc is a"
sub="abc"
if(grepl(sub,input)==TRUE){
print("yes, substring")
}else{
print("no")
}
input="abc is a"
sub="aabc"
if(grepl(sub,input)==TRUE){
print("yes, substring")
}else{
print("no")
}
print(casefold(input))
input="Abc is a"
print(casefold(input))
v2<-matrix(c(10:18),nrow=3,ncol=3)
v1<-matrix(c(1:9),nrow=3,ncol=3)
v2<-matrix(c(10:18),nrow=3,ncol=3)
v3<-matrix(c(19:27),nrow=3,ncol=3)
print(matrix(t(cbind(v1,v2,v3)),ncol=3,byrow=TRUE))
